package partials

// FlashData mirrors the structure of the messages your application provides.
// You should define this struct in your models or internal package and use it 
// when passing data to the templates.
type FlashData struct {
	Success []string
	Error   []string
}

// FlashMessages renders success and error flash messages using Alpine.js for self-closing behavior.
templ FlashMessages(flashes FlashData) {
	<div
		class="fixed top-5 right-5 z-50 flex flex-col items-end space-y-2"
		id="flash-messages"
	>
		<!-- Display Success Messages -->
		if len(flashes.Success) > 0 {
			for _, msg := range flashes.Success {
				<div
					x-data="{ show: true }"
					x-show="show"
					x-init="setTimeout(() => show = false, 5000)"
					x-transition
					class="alert alert-success shadow-lg w-auto max-w-md"
					role="alert"
				>
					<div>
						<svg
							xmlns="http://www.w3.org/2000/svg"
							class="stroke-current flex-shrink-0 h-6 w-6"
							fill="none"
							viewBox="0 0 24 24"
						>
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
							></path>
						</svg>
						<span>{ msg }</span>
					</div>
				</div>
			}
		}

		<!-- Display Error Messages -->
		if len(flashes.Error) > 0 {
			for _, msg := range flashes.Error {
				<div
					x-data="{ show: true }"
					x-show="show"
					x-init="setTimeout(() => show = false, 5000)"
					x-transition
					class="alert alert-error shadow-lg w-auto max-w-md"
					role="alert"
				>
					<div>
						<svg
							xmlns="http://www.w3.org/2000/svg"
							class="stroke-current flex-shrink-0 h-6 w-6"
							fill="none"
							viewBox="0 0 24 24"
						>
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z"
							/>
						</svg>
						<span>{ msg }</span>
					</div>
				</div>
			}
		}
	</div>
}
