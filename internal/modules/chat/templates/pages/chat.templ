package pages

// ChatPage renders the main interface for the real-time chat.
templ ChatPage() {
    <div
        class="container mx-auto p-4 h-screen flex flex-col bg-white shadow-xl rounded-2xl"
        hx-ext="ws"
        ws-connect="/app/ws/html"
        data-script="on wsOpen send {action: 'subscribe', topic: 'chat.messages'} to WebSocket"
    >
        <h1 class="text-3xl font-extrabold mb-6 text-gray-900 border-b pb-2">
            Real-time Chat
        </h1>

        <!-- Chat Messages Container -->
        <div
            id="chat-messages"
            class="flex-grow overflow-y-auto border border-gray-200 rounded-lg p-4 mb-4 bg-gray-50 shadow-inner space-y-3"
        >
            <div class="text-sm text-gray-500 italic p-1">
                Welcome to the chat! Messages will appear here.
            </div>
        </div>

        <!-- Message Form -->
        <form
            id="message-form"
            hx-post="/app/chat/message"
            hx-swap="none"
            class="flex gap-3"
        >
            <input
                id="message-input"
                type="text"
                name="content"
                class="input input-bordered flex-grow p-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 shadow-sm"
                placeholder="Type a message..."
                autofocus
                autocomplete="off"
                required
            />
            <button
                type="submit"
                class="btn btn-primary bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-blue-700 transition duration-150 shadow-md"
            >
                Send
            </button>
        </form>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM loaded, setting up WebSocket...');
            const messageForm = document.getElementById('message-form');
            const messageInput = document.getElementById('message-input');
            const chatMessages = document.getElementById('chat-messages');

            // Debug WebSocket events
            const wsElement = document.querySelector('[ws-connect]');
            if (wsElement) {
                wsElement.addEventListener('wsOpen', (e) => {
                    console.log('WebSocket connected', e.detail);
                    // Subscribe to chat messages when WebSocket connects
                    const ws = htmx.find('div[ws-connect]').__htmx_websocket;
                    if (ws) {
                        ws.send(JSON.stringify({
                            action: 'subscribe',
                            topic: 'chat.messages'
                        }));
                        console.log('Subscribed to chat.messages');
                    }
                });
                
                wsElement.addEventListener('wsClose', (e) => {
                    console.log('WebSocket closed', e.detail);
                });
                
                wsElement.addEventListener('wsError', (e) => {
                    console.error('WebSocket error', e.detail);
                });

                // Handle incoming WebSocket messages
                wsElement.addEventListener('htmx:wsAfterMessage', function(event) {
                    console.log('Received WebSocket message:', event.detail);
                    
                    // Check if this is an HTMX swap message (starts with <div hx-swap-oob)
                    if (typeof event.detail.message === 'string' && 
                        event.detail.message.trim().startsWith('<div hx-swap-oob')) {
                        // Let HTMX handle the swap
                        return;
                    }
                    
                    // Handle JSON messages (if any)
                    try {
                        const data = JSON.parse(event.detail.message);
                        if (data.topic === 'chat.message') {
                            const messageDiv = document.createElement('div');
                            messageDiv.innerHTML = data.payload;
                            chatMessages.appendChild(messageDiv);
                            scrollToBottom();
                        }
                    } catch (e) {
                        // Not a JSON message, ignore the error
                        console.log('Non-JSON message (likely HTML handled by HTMX):', event.detail.message);
                    }
                });
            }

            // Auto-scroll the chat messages container to the bottom
            function scrollToBottom() {
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }

            // Clear the input and refocus after sending a message
            messageForm.addEventListener('submit', function() {
                messageInput.value = '';
                messageInput.focus();
            });

            // Initial scroll to bottom
            scrollToBottom();
        });
    </script>
}