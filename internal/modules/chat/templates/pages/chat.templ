package pages

 
// ChatPage renders the main interface for the real-time chat and game state monitor.
templ ChatPage() {
	<div
		class="container mx-auto p-4 h-screen flex flex-col bg-white shadow-xl rounded-2xl"
		hx-ext="ws"
		ws-connect="/app/ws/bridge"
	>
		<h1 class="text-3xl font-extrabold mb-6 text-gray-900 border-b pb-2">
			Real-time Chat with Data Stream
		</h1>

		<!-- 1. CHAT MESSAGES CONTAINER -->
		<div
			id="chat-messages"
			class="flex-grow overflow-y-auto border border-gray-200 rounded-lg p-4 mb-4 bg-gray-50 shadow-inner space-y-3"
		>
			<!-- Initial message or placeholder -->
			<div class="text-sm text-gray-500 italic p-1">
				Welcome to the chat! Messages will appear here.
			</div>
		</div>

		<!-- 2. FORM FOR SENDING MESSAGES -->
		<form id="chat-form" hx-ws="send" class="flex gap-3">
			<input
				type="text"
				name="content"
				class="input input-bordered flex-grow p-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 shadow-sm"
				placeholder="Type a message..."
				autofocus
				autocomplete="off"
				required
			/>
			<button
				type="submit"
				class="btn btn-primary bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-blue-700 transition duration-150 shadow-md"
			>
				Send
			</button>
		</form>

		<!-- 3. GAME STATE MONITOR (Separate Data Stream) -->
		<div class="mt-6 p-4 border border-gray-700 rounded-lg bg-gray-800 text-white font-mono text-sm shadow-xl">
			<div class="flex justify-between items-center mb-3">
				<h3 class="font-bold text-lg text-yellow-400">Game State Monitor (WS Data)</h3>
				<button
					class="btn btn-xs btn-warning bg-yellow-500 text-gray-900 font-bold py-1 px-3 rounded-full hover:bg-yellow-600 transition duration-150"
					hx-get="/app/debug/hit"
					hx-swap="none"
				>
					Trigger Hit Event
				</button>
			</div>
			<div id="game-state-display" class="text-gray-300">-- Waiting for data from /app/ws/data --</div>
		</div>

		<!-- 4. INLINE JAVASCRIPT LOGIC -->
		<script>
			// A little bit of JS to clear the input after a message is sent via WebSocket
			document
				.getElementById("chat-form")
				.addEventListener("htmx:wsAfterSend", function (evt) {
					// We must query for the input element here, as evt.detail.elt will be the form itself.
					document.querySelector('#chat-form input[name="content"]').value = "";
				});

			// --- Auto-scrolling for the chat container ---
			const chatContainer = document.getElementById("chat-messages");
			// Listen for the htmx event that fires after an out-of-band swap.
			document.body.addEventListener("htmx:oobAfterSwap", function (evt) {
				// We check if the swap target was our chat messages container, or if a child element of it was swapped.
				if (evt.detail.target && evt.detail.target.id === "chat-messages") {
					// Scroll the container to the bottom to show the new message.
					// Use a slight delay (0ms) to ensure the DOM update is fully painted before scrolling.
					setTimeout(() => {
						chatContainer.scrollTop = chatContainer.scrollHeight;
					}, 0);
				}
			});

			// --- JavaScript Island for the Data WebSocket ---
			const gameStateDisplay = document.getElementById("game-state-display");
			// Determine the correct WebSocket protocol (ws or wss) based on the page's protocol.
			const wsProtocol = window.location.protocol === "https:" ? "wss" : "ws";
			const dataSocket = new WebSocket(
				`${wsProtocol}://${window.location.host}/app/ws/data`
			);

			dataSocket.onopen = function (event) {
				console.log("Data WebSocket connection established.");
				gameStateDisplay.textContent =
					"Connection to /app/ws/data established. Waiting for events...";
			};

			dataSocket.onmessage = function (event) {
				try {
					const data = JSON.parse(event.data);
					console.log("Received data:", data);

					// Check if it's a damage event and update the display for any unit.
					if (data.eventType === "damage") {
						gameStateDisplay.textContent = `Unit '${data.unitId}' took ${data.damageTaken} damage. New Health: ${data.newHealth}`;
					}
				} catch (e) {
					console.error("Failed to parse incoming data message:", e);
					gameStateDisplay.textContent = "Error processing data from server.";
				}
			};

			dataSocket.onclose = function (event) {
				console.log("Data WebSocket connection closed.");
				gameStateDisplay.textContent = "Connection to /app/ws/data closed.";
			};
		</script>
	</div>
}
