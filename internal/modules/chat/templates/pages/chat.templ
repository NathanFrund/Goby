package pages

// ChatPage renders the main interface for the real-time chat.
templ ChatPage() {
    <div
        class="container mx-auto p-4 h-screen flex bg-white shadow-xl rounded-2xl"
        hx-ext="ws"
        ws-connect="/app/ws/html"
        data-script="on wsOpen send {action: 'subscribe', topic: 'chat.messages'} to WebSocket"
    >
        <!-- Main Chat Area -->
        <div class="flex-grow flex flex-col mr-4">
            <h1 class="text-3xl font-extrabold mb-6 text-gray-900 border-b pb-2">
                Real-time Chat
            </h1>

            <!-- Chat Messages Container -->
            <div
                id="chat-messages"
                class="flex-grow overflow-y-auto border border-gray-200 rounded-lg p-4 mb-4 bg-gray-50 shadow-inner space-y-3"
            >
                <div class="text-sm text-gray-500 italic p-1">
                    Welcome to the chat! Messages will appear here.
                </div>
            </div>
        </div>

        <!-- Presence Sidebar -->
        <div class="w-64 flex-shrink-0">
            <div 
                id="presence-container" 
                class="sticky top-0"
                hx-get="/app/chat/presence"
                hx-trigger="load"
                hx-swap="innerHTML"
            >
                <!-- Initial empty state - will be populated by presence updates -->
                <div class="bg-gray-50 p-4 rounded-lg">
                    <h3 class="text-sm font-semibold text-gray-700 mb-2">
                        Online Users (0)
                    </h3>
                    <p class="text-sm text-gray-500 italic">Loading...</p>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Continue with the rest of the layout -->
    <div class="container mx-auto p-4">
        <div class="flex-grow flex flex-col">

            <!-- Message Form -->
            <form
                id="message-form"
                hx-post="/app/chat/message"
                hx-swap="none"
                class="flex gap-3"
            >
            <input
                id="message-input"
                type="text"
                name="content"
                class="input input-bordered flex-grow p-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 shadow-sm"
                placeholder="Type a message..."
                autofocus
                autocomplete="off"
                required
            />
                <button
                    type="submit"
                    class="btn btn-primary bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-blue-700 transition duration-150 shadow-md"
                >
                    Send
                </button>
            </form>
        </div>

        <!-- Wargame State Monitor (Separate Data Stream) -->
        <div class="mt-6 p-4 border border-gray-700 rounded-lg bg-gray-800 text-white font-mono text-sm shadow-xl">
            <div class="flex justify-between items-center mb-3">
                <h3 class="font-bold text-lg text-yellow-400">Game State Monitor (WS Data)</h3>
                <button
                    class="btn btn-xs btn-warning bg-yellow-500 text-gray-900 font-bold py-1 px-3 rounded-full hover:bg-yellow-600 transition duration-150"
                    hx-get="/app/wargame/debug/hit"
                    hx-swap="none"
                >
                    Trigger Hit Event
                </button>
            </div>
            <div id="game-state-display" class="text-gray-300">-- Waiting for data from /app/ws/data --</div>
        </div>

        <!-- Add a separate WebSocket connection for game data -->
        <div
            ws-connect="/app/ws/data"
            id="data-ws"
            style="display: none;"
        ></div>

        <script>
            document.addEventListener('DOMContentLoaded', function() {
                console.log('DOM loaded, setting up WebSockets...');
                const messageForm = document.getElementById('message-form');
                const messageInput = document.getElementById('message-input');
                const chatMessages = document.getElementById('chat-messages');
                const gameStateDisplay = document.getElementById('game-state-display');

                // Set up auto-scroll for chat messages
                function setupAutoScroll() {
                    if (!chatMessages) return;
                    
                    // Create a MutationObserver to watch for changes in the chat messages container
                    const observer = new MutationObserver(function() {
                        chatMessages.scrollTop = chatMessages.scrollHeight;
                    });
                    
                    // Configure the observer to watch for changes to child elements
                    observer.observe(chatMessages, { 
                        childList: true, 
                        subtree: true 
                    });
                    
                    // Initial scroll to bottom
                    chatMessages.scrollTop = chatMessages.scrollHeight;
                }

                // Initialize auto-scroll
                setupAutoScroll();

                // Handle HTML WebSocket (for chat)
                const htmlWsElement = document.querySelector('[ws-connect="/app/ws/html"]');
                if (htmlWsElement) {
                    setupChatWebSocket(htmlWsElement);
                }

                // Handle Data WebSocket (for game state)
                const dataWsElement = document.getElementById('data-ws');
                if (dataWsElement) {
                    dataWsElement.addEventListener('htmx:wsAfterMessage', function(event) {
                        try {
                            const data = JSON.parse(event.detail.message);
                            console.log('Game state update:', data);
                            if (gameStateDisplay) {
                                gameStateDisplay.textContent = JSON.stringify(data, null, 2);
                            }
                        } catch (e) {
                            console.log('Non-JSON message in data WebSocket:', event.detail.message);
                        }
                    });
                }

                function setupChatWebSocket(wsElement) {
                    wsElement.addEventListener('wsOpen', (e) => {
                        console.log('Chat WebSocket connected', e.detail);
                        const ws = wsElement.__htmx_websocket;
                        if (ws) {
                            // Subscribe to chat messages
                            ws.send(JSON.stringify({
                                action: 'subscribe',
                                topic: 'chat.messages'
                            }));
                            console.log('Subscribed to chat.messages');
                            
                            // Subscribe to presence updates
                            ws.send(JSON.stringify({
                                action: 'subscribe',
                                topic: 'presence.updates'
                            }));
                            console.log('Subscribed to presence.updates');
                        }
                    });
                    
                    wsElement.addEventListener('wsClose', (e) => {
                        console.log('Chat WebSocket closed', e.detail);
                    });
                    
                    wsElement.addEventListener('wsError', (e) => {
                        console.error('Chat WebSocket error', e.detail);
                    });

                    wsElement.addEventListener('htmx:wsAfterMessage', function(event) {
						console.log('Received chat WebSocket message:', event.detail);
						
						// Skip messages that HTMX is already handling
						if (typeof event.detail.message === 'string' && 
							event.detail.message.trim().startsWith('<div hx-swap-oob')) {
							return;
						}
						
						try {
							const data = JSON.parse(event.detail.message);
							if (data.topic === 'chat.message') {
								const messageDiv = document.createElement('div');
								messageDiv.innerHTML = data.payload;
								chatMessages.appendChild(messageDiv);
							}
						} catch (e) {
							if (!event.detail.message.includes('hx-swap-oob')) {
								console.log('Non-JSON message (likely HTML handled by HTMX):', event.detail.message);
							}
						}
					});
                }

                if (messageForm) {
                    messageForm.addEventListener('submit', function() {
                        if (messageInput) {
                            messageInput.value = '';
                            messageInput.focus();
                        }
                    });
                }
            });
        </script>
    </div>
}