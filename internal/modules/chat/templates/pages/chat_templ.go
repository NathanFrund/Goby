// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
package pages

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

// ChatPage renders the main interface for the real-time chat.
func ChatPage() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"container mx-auto p-4 h-screen flex flex-col bg-white shadow-xl rounded-2xl\" hx-ext=\"ws\" ws-connect=\"/app/ws/html\" data-script=\"on wsOpen send {action: 'subscribe', topic: 'chat.messages'} to WebSocket\"><h1 class=\"text-3xl font-extrabold mb-6 text-gray-900 border-b pb-2\">Real-time Chat</h1><!-- Chat Messages Container --><div id=\"chat-messages\" class=\"flex-grow overflow-y-auto border border-gray-200 rounded-lg p-4 mb-4 bg-gray-50 shadow-inner space-y-3\"><div class=\"text-sm text-gray-500 italic p-1\">Welcome to the chat! Messages will appear here.</div></div><!-- Message Form --><form id=\"message-form\" hx-post=\"/app/chat/message\" hx-swap=\"none\" class=\"flex gap-3\"><input id=\"message-input\" type=\"text\" name=\"content\" class=\"input input-bordered flex-grow p-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 shadow-sm\" placeholder=\"Type a message...\" autofocus autocomplete=\"off\" required> <button type=\"submit\" class=\"btn btn-primary bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-blue-700 transition duration-150 shadow-md\">Send</button></form></div><script>\n        document.addEventListener('DOMContentLoaded', function() {\n            console.log('DOM loaded, setting up WebSocket...');\n            const messageForm = document.getElementById('message-form');\n            const messageInput = document.getElementById('message-input');\n            const chatMessages = document.getElementById('chat-messages');\n\n            // Debug WebSocket events\n            const wsElement = document.querySelector('[ws-connect]');\n            if (wsElement) {\n                wsElement.addEventListener('wsOpen', (e) => {\n                    console.log('WebSocket connected', e.detail);\n                    // Subscribe to chat messages when WebSocket connects\n                    const ws = htmx.find('div[ws-connect]').__htmx_websocket;\n                    if (ws) {\n                        ws.send(JSON.stringify({\n                            action: 'subscribe',\n                            topic: 'chat.messages'\n                        }));\n                        console.log('Subscribed to chat.messages');\n                    }\n                });\n                \n                wsElement.addEventListener('wsClose', (e) => {\n                    console.log('WebSocket closed', e.detail);\n                });\n                \n                wsElement.addEventListener('wsError', (e) => {\n                    console.error('WebSocket error', e.detail);\n                });\n\n                // Handle incoming WebSocket messages\n                wsElement.addEventListener('htmx:wsAfterMessage', function(event) {\n                    console.log('Received WebSocket message:', event.detail);\n                    \n                    // Check if this is an HTMX swap message (starts with <div hx-swap-oob)\n                    if (typeof event.detail.message === 'string' && \n                        event.detail.message.trim().startsWith('<div hx-swap-oob')) {\n                        // Let HTMX handle the swap\n                        return;\n                    }\n                    \n                    // Handle JSON messages (if any)\n                    try {\n                        const data = JSON.parse(event.detail.message);\n                        if (data.topic === 'chat.message') {\n                            const messageDiv = document.createElement('div');\n                            messageDiv.innerHTML = data.payload;\n                            chatMessages.appendChild(messageDiv);\n                            scrollToBottom();\n                        }\n                    } catch (e) {\n                        // Not a JSON message, ignore the error\n                        console.log('Non-JSON message (likely HTML handled by HTMX):', event.detail.message);\n                    }\n                });\n            }\n\n            // Auto-scroll the chat messages container to the bottom\n            function scrollToBottom() {\n                chatMessages.scrollTop = chatMessages.scrollHeight;\n            }\n\n            // Clear the input and refocus after sending a message\n            messageForm.addEventListener('submit', function() {\n                messageInput.value = '';\n                messageInput.focus();\n            });\n\n            // Initial scroll to bottom\n            scrollToBottom();\n        });\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
