// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
package pages

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

// ChatPage renders the main interface for the real-time chat.
func ChatPage() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"container mx-auto p-4 h-screen flex flex-col bg-white shadow-xl rounded-2xl\" hx-ext=\"ws\" ws-connect=\"/app/ws/html\" data-script=\"on wsOpen send {action: 'subscribe', topic: 'chat.messages'} to WebSocket\"><h1 class=\"text-3xl font-extrabold mb-6 text-gray-900 border-b pb-2\">Real-time Chat</h1><!-- Chat Messages Container --><div id=\"chat-messages\" class=\"flex-grow overflow-y-auto border border-gray-200 rounded-lg p-4 mb-4 bg-gray-50 shadow-inner space-y-3\"><div class=\"text-sm text-gray-500 italic p-1\">Welcome to the chat! Messages will appear here.</div></div><!-- Message Form --><form id=\"message-form\" hx-post=\"/app/chat/message\" hx-swap=\"none\" class=\"flex gap-3\"><input id=\"message-input\" type=\"text\" name=\"content\" class=\"input input-bordered flex-grow p-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 shadow-sm\" placeholder=\"Type a message...\" autofocus autocomplete=\"off\" required> <button type=\"submit\" class=\"btn btn-primary bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-blue-700 transition duration-150 shadow-md\">Send</button></form><!-- Wargame State Monitor (Separate Data Stream) --><div class=\"mt-6 p-4 border border-gray-700 rounded-lg bg-gray-800 text-white font-mono text-sm shadow-xl\"><div class=\"flex justify-between items-center mb-3\"><h3 class=\"font-bold text-lg text-yellow-400\">Game State Monitor (WS Data)</h3><button class=\"btn btn-xs btn-warning bg-yellow-500 text-gray-900 font-bold py-1 px-3 rounded-full hover:bg-yellow-600 transition duration-150\" hx-get=\"/app/wargame/debug/hit\" hx-swap=\"none\">Trigger Hit Event</button></div><div id=\"game-state-display\" class=\"text-gray-300\">-- Waiting for data from /app/ws/data --</div></div><!-- Add a separate WebSocket connection for game data --><div ws-connect=\"/app/ws/data\" id=\"data-ws\" style=\"display: none;\"></div><script>\n            document.addEventListener('DOMContentLoaded', function() {\n                console.log('DOM loaded, setting up WebSockets...');\n                const messageForm = document.getElementById('message-form');\n                const messageInput = document.getElementById('message-input');\n                const chatMessages = document.getElementById('chat-messages');\n                const gameStateDisplay = document.getElementById('game-state-display');\n\n                // Set up auto-scroll for chat messages\n                function setupAutoScroll() {\n                    if (!chatMessages) return;\n                    \n                    // Create a MutationObserver to watch for changes in the chat messages container\n                    const observer = new MutationObserver(function() {\n                        chatMessages.scrollTop = chatMessages.scrollHeight;\n                    });\n                    \n                    // Configure the observer to watch for changes to child elements\n                    observer.observe(chatMessages, { \n                        childList: true, \n                        subtree: true \n                    });\n                    \n                    // Initial scroll to bottom\n                    chatMessages.scrollTop = chatMessages.scrollHeight;\n                }\n\n                // Initialize auto-scroll\n                setupAutoScroll();\n\n                // Handle HTML WebSocket (for chat)\n                const htmlWsElement = document.querySelector('[ws-connect=\"/app/ws/html\"]');\n                if (htmlWsElement) {\n                    setupChatWebSocket(htmlWsElement);\n                }\n\n                // Handle Data WebSocket (for game state)\n                const dataWsElement = document.getElementById('data-ws');\n                if (dataWsElement) {\n                    dataWsElement.addEventListener('htmx:wsAfterMessage', function(event) {\n                        try {\n                            const data = JSON.parse(event.detail.message);\n                            console.log('Game state update:', data);\n                            if (gameStateDisplay) {\n                                gameStateDisplay.textContent = JSON.stringify(data, null, 2);\n                            }\n                        } catch (e) {\n                            console.log('Non-JSON message in data WebSocket:', event.detail.message);\n                        }\n                    });\n                }\n\n                function setupChatWebSocket(wsElement) {\n                    wsElement.addEventListener('wsOpen', (e) => {\n                        console.log('Chat WebSocket connected', e.detail);\n                        const ws = wsElement.__htmx_websocket;\n                        if (ws) {\n                            ws.send(JSON.stringify({\n                                action: 'subscribe',\n                                topic: 'chat.messages'\n                            }));\n                            console.log('Subscribed to chat.messages');\n                        }\n                    });\n                    \n                    wsElement.addEventListener('wsClose', (e) => {\n                        console.log('Chat WebSocket closed', e.detail);\n                    });\n                    \n                    wsElement.addEventListener('wsError', (e) => {\n                        console.error('Chat WebSocket error', e.detail);\n                    });\n\n                    wsElement.addEventListener('htmx:wsAfterMessage', function(event) {\n\t\t\t\t\t\tconsole.log('Received chat WebSocket message:', event.detail);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Skip messages that HTMX is already handling\n\t\t\t\t\t\tif (typeof event.detail.message === 'string' && \n\t\t\t\t\t\t\tevent.detail.message.trim().startsWith('<div hx-swap-oob')) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst data = JSON.parse(event.detail.message);\n\t\t\t\t\t\t\tif (data.topic === 'chat.message') {\n\t\t\t\t\t\t\t\tconst messageDiv = document.createElement('div');\n\t\t\t\t\t\t\t\tmessageDiv.innerHTML = data.payload;\n\t\t\t\t\t\t\t\tchatMessages.appendChild(messageDiv);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tif (!event.detail.message.includes('hx-swap-oob')) {\n\t\t\t\t\t\t\t\tconsole.log('Non-JSON message (likely HTML handled by HTMX):', event.detail.message);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n                }\n\n                if (messageForm) {\n                    messageForm.addEventListener('submit', function() {\n                        if (messageInput) {\n                            messageInput.value = '';\n                            messageInput.focus();\n                        }\n                    });\n                }\n            });\n        </script></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
